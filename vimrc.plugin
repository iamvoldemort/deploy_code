" neocomplete
let g:neocomplete#enable_at_startup = 1
let g:neocomplete_snippets_dir = '~/dotfiles/.neocon-snippets'
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'javascript' : '~/dotfiles/.neocon-snippets/javascript.snip'
\ }
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#snippets_directory='~/dotfiles/.neocon-snippets/'

imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)

" neosnippet
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
nmap <Space>nes :NeoSnippetEdit<return>

if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" emmet
nmap <C-e> <C-y>,
imap <C-e> <C-y>,
vmap <C-e> <C-y>,

let g:user_emmet_settings = {
    \    'variables': {
    \      'lang': "ja"
    \    },
    \   'indentation': '  '
    \ }

" vim-airline
let g:airline#extensions#tabline#enabled = 1

" EasyMotion
nmap s <Plug>(easymotion-s2)
vmap s <Plug>(easymotion-s2)
nmap <C-s> <Plug>(easymotion-s2)
let g:EasyMotion_keys='hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
let g:EasyMotion_leader_key = ";"
let g:EasyMotion_grouping = 1
let g:EasyMotion_use_upper = 1
let g:EasyMotion_smartcase = 1
let g:EasyMotion_use_smartsign_us = 1

" clever-f
let g:clever_f_use_migemo = 1

" skk
let skk_jisyo = '~/.skk-dic'
let skk_large_jisyo = '~/.skk-dic/SKK-JISYO.L'
let skk_auto_save_jisyo = 1
let skk_keep_state = 0
let skk_egg_like_newline = 1
let skk_show_annotation = 1
let skk_use_face = 1
let skk_jisyo_encoding = 'utf-8'

" unite
nmap ,ub :Unite buffer <return>
nmap ,uh :Unite file_mru <return>
nmap ,ul :Unite locate<return>
nmap ,uf :UniteWithBufferDir -buffer-name=files file file/new <return>
nmap ,uc :Unite -auto-preview colorscheme<return>
nmap ,us :Unite grep:. -buffer-name=search-buffer<CR>
nmap ,ur :UniteResume<return>

let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1

" unite grep に ag(The Silver Searcher) を使う
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column -u'
  let g:unite_source_grep_recursive_opt = ''
endif

" incsearch
map / <Plug>(incsearch-forward)
map z/ <Plug>(incsearch-fuzzy-/)
map m/ <Plug>(incsearch-migemo-/)

function! s:config_customincsearch() abort
  return {
  \  'converters': [
  \    incsearch#config#migemo#converter()
  \  ],
  \  'modules': [
  \    incsearch#config#easymotion#module()
  \  ],
  \  'keymap': {"\<CR>": '<Over>(easymotion)'}
  \}
endfunction

" vim-rooter
let g:rooter_patterns = ['.git/']

" switch
nnoremap - :Switch<cr>

" vim-ref
" vim-ref のバッファを q で閉じられるようにする
autocmd FileType ref-* nnoremap <buffer> <silent> q :<C-u>close<CR>

" 辞書定義
let g:ref_source_webdict_sites = {
\   'je': {
\     'url': 'http://dictionary.infoseek.ne.jp/jeword/%s',
\   },
\   'ej': {
\     'url': 'http://dictionary.infoseek.ne.jp/ejword/%s',
\   },
\   'w': {
\     'url': 'http://ja.wikipedia.org/wiki/%s',
\   },
\ }

" デフォルトサイト
let g:ref_source_webdict_sites.default = 'ej'

" 出力に対するフィルタ
" 最初の数行を削除
function! g:ref_source_webdict_sites.je.filter(output)
  return join(split(a:output, "\n")[15 :], "\n")
endfunction

function! g:ref_source_webdict_sites.ej.filter(output)
  return join(split(a:output, "\n")[15 :], "\n")
endfunction

call altercmd#load()
nmap ,rej :Ref webdict ej 
nmap ,rje :Ref webdict je 
nmap ,rw :Ref webdict w 
